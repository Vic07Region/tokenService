// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: token_queries.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
    INSERT INTO Tokens (user_id, refresh_token_hash, ip_address_issue)
    VALUES ($1,
            $2,
            $3
            )
    RETURNING token_id
`

type CreateTokenParams struct {
	UserID           uuid.NullUUID  `json:"user_id"`
	RefreshTokenHash string         `json:"refresh_token_hash"`
	IpAddressIssue   sql.NullString `json:"ip_address_issue"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.RefreshTokenHash, arg.IpAddressIssue)
	var token_id int64
	err := row.Scan(&token_id)
	return token_id, err
}

const fetchToken = `-- name: FetchToken :one
    SElECT token_id, user_id, refresh_token_hash, ip_address_issue, refreshed FROM Tokens WHERE
    refresh_token_hash = $1 LIMIT 1
`

func (q *Queries) FetchToken(ctx context.Context, refreshTokenHash string) (Token, error) {
	row := q.db.QueryRowContext(ctx, fetchToken, refreshTokenHash)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.RefreshTokenHash,
		&i.IpAddressIssue,
		&i.Refreshed,
	)
	return i, err
}

const refreshedToken = `-- name: RefreshedToken :exec
    UPDATE Tokens
    SET refreshed = TRUE
    WHERE token_id = $1
`

func (q *Queries) RefreshedToken(ctx context.Context, tokenID int64) error {
	_, err := q.db.ExecContext(ctx, refreshedToken, tokenID)
	return err
}
